const title = document.getElementById("title");
console.log(title);

const btn = document.getElementById("btn");
const btn2 = document.getElementById("btn2");
const btn3 = document.getElementById("btn3");
let clickNumber = document.getElementById("click-number");

console.log(btn);

btn.addEventListener("click", function(){
    title.innerHTML = "blblblblblblblblbl"
})

let click = 0;

btn2.addEventListener("click", function(){
    click++; // est √©quivalent √† click += 1
    clickNumber.innerHTML = click

})

btn3.addEventListener("click", function(){
    click--; // est √©quivalent √† click -= 1
    clickNumber.innerHTML = click

})

//avec les inputs
const inputText = document.getElementById("input-text");
const input1 = document.getElementById("input1");
input1.value = "" //permet au contenu de l'input de s'effacer √† chaque rechargement

input1.addEventListener("input1", function(){
    let valueInput = this.value
    inputText.innerHTML = valueInput;
})

const mom = document.getElementById("mom");

//childNodes
//r√©cup√©rer tous les √©l√©ments/noeuds ( m√™me le texte )
console.log(mom.childNodes)
//ici, on r√©cup√®re les √©l√©ments √† l'int√©rieur de la div qui se trouve dans mom
console.log(mom.childNodes[5].childNodes)

//children
//r√©cup√®re tous les √©l√©ments enfants direct de mom (pas le texte)
console.log(mom.children)

//first child ( prend le texte en compte)
console.log(mom.firstChild)

//firstElementChild
console.log(mom.firstElementChild)

//on va supprimer le premier li de mom √† partir des param√®tres pr√©c√©dents
console.log(mom.children[2].firstElementChild.firstElementChild.remove());

//cr√©ation d'un √©l√©ment
let img = document.createElement("img");
// on modifie son src
img.src = "https://previews.123rf.com/images/captainimages/captainimages1403/captainimages140300222/26708972-close-up-of-one-piece-of-fried-potato-chips-isolated-on-white-background.jpg"
img.alt = "une belle chips"
img.style.width = "200px";
img.style.height = "auto";

//maintenant que l'on a construit notre image, on peut "l'accrocher" √† un autre √©l√©ment mais en tant qu'enfant
mom.appendChild(img)

//r√©cuperer les class

// m√©thode d√©conseill√©e
//const pokemons = document.getElementsByClassName("pokemons")
//m√©thode standard
const pokemons = document.querySelectorAll(`.pokemons`)
//si on sait qu'il y a qu'un √©l√©m√©nt d'une class, on peut utiliser :
const listPokemon = document.querySelector(`.list-pokemon`)
//queryselector prendra uniquement le premier √©l√©ment avec ce nom de class
console.log(pokemons)
console.log(listPokemon)
const colorPokemon = ["#ebae34", "#f5b0d7", "#f5bf82", "#d2faac", "#d7c5d9"];
for (let i = 0; i < colorPokemon.length; i++) {
    pokemons[i].style.color = colorPokemon[i]
}
//ajouter une class
// element.classList.add(nom de la class)
//enlever une class
//element.classList.remove(nom de la class)
//basculer de class
//element.classList.toggle(nom de la class)


//setTimeout(function (){
    //console.log("3 secondes se sont √©coul√©es !")

//}, 3000)

//setInterval(function (){
    //console.log("une seconde vient de passer !")

//}, 1000)

const timer = setTimeout(function (){
    console.log("3 secondes se sont √©coul√©es !")

}, 3000)

clearTimeout(timer) // c'est plus interressant dans un √©v√®nement

const interval = setInterval(function (){
    console.log("une seconde vient de passer !")

}, 1000)

clearInterval(interval)

// TP LE SCROLL TAQUIN

const punchlines = [
  "Tu descends plus lentement qu‚Äôune mise √† jour Windows üêå",
  "Allez, on se r√©veille‚Ä¶ le bas de la page va pas venir tout seul ! üò¥",
  "Tu veux un caf√© pour te motiver ou c‚Äôest une strat√©gie de flemme ? ‚òï",
  "Je pourrais tricoter un pull pendant que tu scrolles‚Ä¶ üß∂",
  "C‚Äôest un concours de lenteur ou tu fais √ßa expr√®s ? üòÖ",
  "Encore un effort, c‚Äôest pas le Mont Everest non plus ‚õ∞Ô∏è",
  "Allez courage, m√™me les tortues ont des objectifs ! üê¢",
  "Tu scrolles comme si tu voulais pas savoir la fin üìú",
  "Je vois plus de poussi√®re que de progr√®s üëÄ",
  "On dirait que tu scrolles avec les coudes ü¶æ",
  "Si tu vas plus lentement, on va repartir en 2022‚Ä¶ ‚è≥",
  "Il y a des glaciers qui fondent plus vite que toi üåç",
  "M√™me une limace sous calmants serait d√©j√† arriv√©e üêå",
  "Tu veux qu‚Äôon t‚Äôapplaudisse pour chaque pixel descendu ? üëè",
  "Tu scrolles en morse ou c‚Äôest ton style naturel ? üß†",
  "Je me demande si t‚Äôas pas mis une brique sur la barre d‚Äôespace ü§î",
  "T‚Äôas le m√™me rythme qu‚Äôun fax sous la pluie üì†",
  "On est sur une promenade digestive ou un vrai scroll ? üçΩÔ∏è",
  "Tu vas finir par t'endormir avant d‚Äôy arriver üò¥",
  "Il faut que je t‚Äôenvoie une newsletter pour te motiver ? üì¨",
  "Tu scrolles comme si tu testais chaque pixel √† la main üßê",
  "Courage, t‚Äôes √† deux doigts d‚Äôarriver au milieu ! (ou pas...) üòá",
  "M√™me la barre de chargement d'Internet Explorer est jalouse de ta lenteur üíª",
  "Faut-il t‚Äôenvoyer une carte au tr√©sor pour trouver le bas ? üó∫Ô∏è",
  "Si tu scrolles encore plus doucement, je vais devoir appeler ta maman üë©‚Äçüë¶"
];

let intervalid = null;

// fonction qui va v√©rifier si nous sommes en bas de la page
function isAtTheBottomOfThePage(){
    // window.innerHeight -> correspond √† la taille en pixels de votre √©cran
    // window.scrollY -> la position du scroll par rapport √† la taille maximale de l'√©cran
    // document.body.scrollHeight -> c'est nos 2000 vh convertis en pixels
    // le -10 est une tolerance
    return window.innerHeight + window.scrollY >= document.body.scrollHeight - 10;
}

function startPunchlines(){
    if (intervalid === null){
        intervalid = setInterval(function (){
            if(!isAtTheBottomOfThePage()){ // tant qu'on est pas en bas de la page
                const punchline = punchlines[Math.floor( Math.random() * punchlines.length)] // il doit m'envoyer une insulte au hasard parmis les lignes du tableau punchline
                console.log(punchline)
            } else {
                console.log("Super champion tu as r√©ussis !")
                // fonction qui arr√™te le crono
                stopPunchlines()
            
            }
                
            
        }, 1000)

    }
}

function stopPunchlines(){
    clearInterval(intervalid)
    intervalid = null;
}

startPunchlines()



